document.addEventListener("DOMContentLoaded", () => {
  const API_BASE = "http://116.203.51.133:9090"; // —Å–µ—Ä–≤–µ—Ä –±—ç–∫–µ–Ω–¥–∞
  const form = document.getElementById("tab-store");
  const passwordInput = document.getElementById("password");
  const confirmPasswordInput = document.getElementById("confirmPassword");
  const passwordError = document.getElementById("passwordError");

  // üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
  function validatePasswords() {
    if (confirmPasswordInput.value.length === 0) {
      passwordError.style.display = "none";
      confirmPasswordInput.classList.remove("error-input");
      return true;
    }

    if (passwordInput.value !== confirmPasswordInput.value) {
      passwordError.style.display = "block";
      confirmPasswordInput.classList.add("error-input");
      return false;
    } else {
      passwordError.style.display = "none";
      confirmPasswordInput.classList.remove("error-input");
      return true;
    }
  }

  confirmPasswordInput.addEventListener("input", validatePasswords);
  passwordInput.addEventListener("input", validatePasswords);

  form.addEventListener("submit", async (e) => {
    e.preventDefault();

    if (!validatePasswords()) {
      alert("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç");
      return;
    }

    // –°–æ–≥–ª–∞—Å–∏–µ —Å —É—Å–ª–æ–≤–∏—è–º–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞ –±—ç–∫–µ)
    if (!form.agreedToTerms.checked) {
      alert("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è");
      return;
    }

    // –õ–æ–≥–æ—Ç–∏–ø –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω (–Ω–∞ –±—ç–∫–µ –∫–æ–ª–æ–Ω–∫–∞ logo nullable = false)
    if (!form.logo || form.logo.files.length === 0) {
      alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –ª–æ–≥–æ—Ç–∏–ø –º–∞–≥–∞–∑–∏–Ω–∞");
      form.logo?.classList?.add("error-input");
      return;
    } else {
      form.logo.classList?.remove("error-input");
    }

    const formData = new FormData();

    // === –°—Ç—Ä–æ–∫–æ–≤—ã–µ –ø–æ–ª—è ===
    formData.append("storeName", form.storeName.value);
    formData.append("ownerName", form.ownerName.value);
    formData.append("email", form.email.value);
    formData.append("password", form.password.value);
    formData.append("confirmPassword", form.confirmPassword.value);
    formData.append("storeDescription", form.storeDescription.value);
    formData.append("phone", form.phone.value);
    formData.append("location", form.location.value);
    formData.append("category", form.category.value);

    // === Boolean ===
    formData.append("agreedToTerms", form.agreedToTerms.checked ? "true" : "false");

    // === –§–∞–π–ª ===
    // –õ–æ–≥–æ—Ç–∏–ø –∫–∞–∫ MultipartFile (–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω)
    formData.append("logo", form.logo.files[0]);

    // === –õ–µ–≥–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ===
    try {
      const safeLog = [];
      for (let [key, value] of formData.entries()) {
        if (key === "password" || key === "confirmPassword") {
          safeLog.push({ field: key, value: "***" });
        } else if (value instanceof File) {
          safeLog.push({ field: key, type: "File", name: value.name, size: `${value.size} bytes`, mime: value.type });
        } else {
          safeLog.push({ field: key, value: value });
        }
      }
      console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:", safeLog);
    } catch (_) {}

    try {
      const response = await fetch(`${API_BASE}/home/store/register`, {
        method: "POST",
        body: formData,
      });

      const contentType = response.headers.get("content-type") || "";
      const parseBody = async () =>
        contentType.includes("application/json") ? response.json() : response.text();

      if (!response.ok) {
        const errBody = await parseBody();
        const errMsg = typeof errBody === "string" ? errBody : errBody?.message || JSON.stringify(errBody);
        throw new Error(`–û—à–∏–±–∫–∞: ${response.status} ‚Üí ${errMsg}`);
      }

      const body = await parseBody();
      console.log("‚úÖ –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:", body);
      alert("–ú–∞–≥–∞–∑–∏–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω");
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:", error);
      alert("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: " + error.message);
    }
  });
});
